#!/bin/sh

# -----------------------------------------------------------------------------
# >>>> CUSTOMIZE: Set the computer name. No spaces or boom!
# -----------------------------------------------------------------------------
COMPUTER_NAME=Taonga


# -----------------------------------------------------------------------------
# >>>> CUSTOIMIZE: Create disk drive(s)
# -----------------------------------------------------------------------------
if [ ! -e "ssd.qcow2" ]; then
	qemu-img create -f qcow2 "ssd.qcow2" 8G
fi

if [ ! -e "hdd.qcow2" ]; then
	qemu-img create -f qcow2 "hdd.qcow2" 8G
fi


# -----------------------------------------------------------------------------
# Network interfaces
# -----------------------------------------------------------------------------
BRIDGE=br0
TAP=tap0


# -----------------------------------------------------------------------------
# The local path allows spaces in path.
# -----------------------------------------------------------------------------
SCRIPT_DIR="$(dirname "$(realpath -s "$0")")"


# -----------------------------------------------------------------------------
# Generate a dynamic mac address for each launch
# -----------------------------------------------------------------------------
MAC=$(printf 52:54:00; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 ":%02X"')


# -----------------------------------------------------------------------------
# Generate a UUID for each launch
# -----------------------------------------------------------------------------
UUID=$(uuidgen)


# -----------------------------------------------------------------------------
# Print usage text
# -----------------------------------------------------------------------------
if [ "$1" == "--help" ]; then
	echo "Usage: start-vm [OPTIONS]"
	echo "Start the virtual machine: taonga"
	echo ""
	echo "-b, --bios		start virtual machine with a legacy BIOS"
	exit 0
fi


# -----------------------------------------------------------------------------
# >>>> CUSTOMIZE: UEFI specific settings
#                   - ovmf-x86_64-code.bin    | ovmf-x86_64-vars.bin
#                   - ovmf-x86_64-ms-code.bin | ovmf-x86_64-ms-vars.bin
# -----------------------------------------------------------------------------
OVMF="-drive file=/usr/share/qemu/ovmf-x86_64-code.bin,if=pflash,format=raw,unit=0,readonly=on -drive file=nvram,if=pflash,format=raw,unit=1"
if [ "$1" == "-b" ] || [ "$1" == "--bios" ]; then
	unset OVMF
else
	if [ ! -e "nvram" ]; then
		cp /usr/share/qemu/ovmf-x86_64-vars.bin nvram
	fi
fi

# -----------------------------------------------------------------------------
# Create missing UEFI desktop shortcut
# -----------------------------------------------------------------------------
if [ ! -e "${COMPUTER_NAME}.desktop" ]; then
	cat > "${COMPUTER_NAME}.desktop" <<EOF
[Desktop Entry]
Name=${COMPUTER_NAME}
GenericName[en_US.UTF-8]=Virtual Machine
Type=Application
Version=1.0
Comment=Start the ${COMPUTER_NAME} virtual machine.
Path=${SCRIPT_DIR}
Exec="${SCRIPT_DIR}/start-vm"
Icon=${SCRIPT_DIR}/vm.png
Terminal=false
Categories=Development
EOF
chmod +x "${COMPUTER_NAME}.desktop"
fi


# -----------------------------------------------------------------------------
# Create missing BIOS desktop shortcut
# -----------------------------------------------------------------------------
if [ ! -e "${COMPUTER_NAME}-BIOS.desktop" ]; then
	cat > "${COMPUTER_NAME}-BIOS.desktop" <<EOF
[Desktop Entry]
Name=${COMPUTER_NAME} (BIOS)
GenericName[en_US.UTF-8]=Virtual Machine
Type=Application
Version=1.0
Comment=Start the ${COMPUTER_NAME} virtual machine.
Path=${SCRIPT_DIR}
Exec="${SCRIPT_DIR}/start-vm" -b
Icon=${SCRIPT_DIR}/vm.png
Terminal=false
Categories=Development
EOF
chmod +x "${COMPUTER_NAME}-BIOS.desktop"
fi


# -----------------------------------------------------------------------------
# Create network device
# printf "KERNEL==\"tun\", GROUP=\"users\", MODE=\"0660\", OPTIONS+=\"static_node=net/tun\"" > /etc/udev/rules.d/90-tuntap.rules
# setcap cap_net_admin+ep /usr/sbin/ip
# -----------------------------------------------------------------------------
ip tuntap add ${TAP} mode tap group users
ip link set ${TAP} up
sleep 0.5s
ip link set ${TAP} master ${BRIDGE}


# -----------------------------------------------------------------------------
# >>>> CUSTOIMIZE: Launch qemu-kvm
# -----------------------------------------------------------------------------
LC_ALL=C \
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
QEMU_AUDIO_DRV=spice \
/usr/bin/qemu-kvm \
-cpu max,hv_time,hv_relaxed,hv_vapic,hv_spinlocks=0x1fff \
-display sdl \
-name guest=${COMPUTER_NAME} \
-net nic,model=virtio,macaddr=${MAC} \
-net tap,ifname=${TAP},script=no,downscript=no \
-monitor vc \
-nodefaults \
-no-hpet \
-no-shutdown \
-no-user-config \
${OVMF} \
-readconfig vm.ini \
-uuid ${UUID}


# -----------------------------------------------------------------------------
# Destroy network device
# -----------------------------------------------------------------------------
ip link set ${TAP} down
ip tuntap del ${TAP} mode tap
